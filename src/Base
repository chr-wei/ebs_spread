VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Base"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'  This macro collection lets you organize your tasks and schedules
'  for you with the evidence based schedule (EBS) approach by Joel Spolsky.
'
'  Copyright (C) 2020  Christian Weihsbach
'  This program is free software; you can redistribute it and/or modify
'  it under the terms of the GNU General Public License as published by
'  the Free Software Foundation; either version 3 of the License, or
'  (at your option) any later version.
'  This program is distributed in the hope that it will be useful,
'  but WITHOUT ANY WARRANTY; without even the implied warranty of
'  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'  GNU General Public License for more details.
'  You should have received a copy of the GNU General Public License
'  along with this program; if not, write to the Free Software Foundation,
'  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
'
'  Christian Weihsbach, weihsbach.c@gmail.com

Option Explicit

'This module contains 'base'code which deals with extended data structure functionalities

'To compare upper and lower case texts
Option Compare Text

Enum SortDir
    ceDescending = -1
    ceAscending = 1
End Enum

Sub Test_Base()
    Dim darr() As Double
    darr = Utils.CopyVarArrToDoubleArr(Array(0.4, 0.5, 7))
    Dim concateeOne As Double: concateeOne = 5#
    Debug.Print Utils.SerializeArray(Base.ConcatToArray(darr, concateeOne))
    Dim concateeTwo() As Double: concateeTwo = Utils.CopyVarArrToDoubleArr(Array(77, 55, 44))
    Debug.Print Utils.SerializeArray(Base.ConcatToArray(darr, concateeTwo))
    
    Dim arrThree() As Double: arrThree = Utils.CopyVarArrToDoubleArr(Array(77, 55, 44, 66, 11))
    Debug.Print Utils.SerializeArray(Base.ExtractSubArray(arrThree, 0, 0))
    Debug.Print Utils.SerializeArray(Base.ExtractSubArray(arrThree, 0, 1))
    Debug.Print Utils.SerializeArray(Base.ExtractSubArray(arrThree, 2, 7))
End Sub

Public Function QuickSort(ByRef vArray As Variant, direction As SortDir, Optional inLow As Long = -1, Optional inHi As Long = -1, _
                          Optional ByRef associate As Variant, _
                          Optional ByRef associate2 As Variant, _
                          Optional ByRef associate3 As Variant)
    
    Const FN As String = "QuickSort"
    'This function sorts an numeric array in ascending or descending order.
    'If specified an associate array with equal length will be sorted alike
    '
    'Input args:
    '  vArray: Numeric array to sort
    '  direction:  Ascending or descending direction (enum)
    '  inLow:      Starting index for pivot partitioning. Leave empty when calling the method
    '  inHi:       Ending index for pivot partitioning. Leave empty when calling the method
    '  associate1: Array which will be sorted alike with the vArray. This array can also be non-numeric
    '
    'Output args:
    '  None. vArray and associate array are called by ref and returned via passed args
    'Set the standard limits if no limits are specified
    
    If Not Base.IsArrayAllocated(vArray) Then
        Call MessageUtils.HandleMessage("vArray is not allocated", ceError, FN)
        'Raise 'Invalid property value'
        Call Err.Raise(380)
        Exit Function
    End If
    
    If IsMissing(inLow) Or inLow = -1 Then
        'Set the starting index for pivoting
        inLow = LBound(vArray)
    End If
    
    If IsMissing(inHi) Or inHi = -1 Then
        'Set the ending index for pivoting
        inHi = UBound(vArray)
    End If
    
    'https://im-coder.com/vba-array-sortierfunktion.html
    Dim pivot   As Variant
    Dim tmpSwap As Variant
  
    Dim tmpAssociateSwap As Variant
  
    Dim tmpLow  As Long
    Dim tmpHi   As Long

    tmpLow = inLow
    tmpHi = inHi

    pivot = vArray((inLow + inHi) \ 2)
    
    'Cycle through the pivoted subgroup of elements and swap
    While (tmpLow <= tmpHi)
        Select Case direction
        
        Case SortDir.ceAscending
            While (vArray(tmpLow) < pivot And tmpLow < inHi)
                tmpLow = tmpLow + 1
            Wend
            While (pivot < vArray(tmpHi) And tmpHi > inLow)
                tmpHi = tmpHi - 1
            Wend
                
        Case SortDir.ceDescending
            While (vArray(tmpLow) > pivot And tmpLow < inHi)
                tmpLow = tmpLow + 1
            Wend
            
            While (pivot > vArray(tmpHi) And tmpHi > inLow)
                tmpHi = tmpHi - 1
            Wend
        End Select
            
        If (tmpLow <= tmpHi) Then
            'Do the swap with the value array
            tmpSwap = vArray(tmpLow)
            vArray(tmpLow) = vArray(tmpHi)
            vArray(tmpHi) = tmpSwap
       
            If Not IsMissing(associate) Then
                'Do the swap for the associate array
                tmpAssociateSwap = associate(tmpLow)
                associate(tmpLow) = associate(tmpHi)
                associate(tmpHi) = tmpAssociateSwap
            End If
            
            If Not IsMissing(associate2) Then
                'Do the swap for the associate array
                tmpAssociateSwap = associate2(tmpLow)
                associate2(tmpLow) = associate2(tmpHi)
                associate2(tmpHi) = tmpAssociateSwap
            End If
            
            If Not IsMissing(associate3) Then
                'Do the swap for the associate array
                tmpAssociateSwap = associate3(tmpLow)
                associate3(tmpLow) = associate3(tmpHi)
                associate3(tmpHi) = tmpAssociateSwap
            End If
            tmpLow = tmpLow + 1
            tmpHi = tmpHi - 1
        End If
    Wend
    
    'Recursively call a sub array to sort
    If (inLow < tmpHi) Then QuickSort vArray, direction, inLow, tmpHi, associate
    If (tmpLow < inHi) Then QuickSort vArray, direction, tmpLow, inHi, associate
End Function

Function FindAll(ByVal rng As Range, ByVal propertyVal As Variant, Optional property As String = "Value", _
                 Optional compType As ComparisonTypes = ComparisonTypes.ceStringComp) As Range
    'Find a cell in a given range which matches a given value. By default a text comparison of the cell is performed.
    'This function also works for hidden cells
    
    'Input args:
    '  rng:           The range in which searching is performed
    '  propertyVal:    The value of the property one wants to find ('Value'property is default)
    '  compType:       The type of comparison one wants to use (<, >, etc.)
    '
    'Output args:
    '  FindAll:        Range of cells matching the criteria (subset of rng)

    
    'Init output
    Set FindAll = Nothing
    
    'Check args
    If rng Is Nothing Or StrComp(propertyVal, "") = 0 Then
        Exit Function
    End If
    
    Dim cell As Range
    Dim result As Range
    
    Dim compMatch As Boolean
    
    'Set a flag for the first loop iteration to init the value for union-function
    Dim firstFlag As Boolean
    firstFlag = True
        
    For Each cell In rng
        'Cycle through the range and find all matching cells.
        If Not cell Is Nothing Then
            Dim cellVal As Variant
            
            'Retrieve the property. By default the 'Value' property will be returned.
            cellVal = CallByName(cell, property, VbGet)
            
            If Not IsError(cellVal) Then
                'Perform the comparison
                compMatch = False
                Select Case compType
                Case ComparisonTypes.ceRegex
                    Dim regex As New RegExp
                    regex.Pattern = propertyVal
                    compMatch = (regex.Test(cellVal))
                Case ComparisonTypes.ceStringComp
                    compMatch = (StrComp(cellVal, propertyVal) = 0)
                Case ComparisonTypes.ceEqual
                    compMatch = (cellVal = propertyVal)
                Case ComparisonTypes.ceDoubleLess
                    compMatch = (CDbl(cellVal) < CDbl(propertyVal))
                Case ComparisonTypes.ceDoubleBigger
                    compMatch = (CDbl(cellVal) > CDbl(propertyVal))
                Case ComparisonTypes.ceIs
                    compMatch = (TypeName(cellVal) = CStr(propertyVal))
                End Select
                
                If compMatch Then
                    'Criteria matched - cell found
                    If firstFlag Then
                        'Set the output to the found cell as initial value for the first hit.
                        Set result = cell
                        firstFlag = False
                    Else
                        'Combine the previously found cells to a common range
                        Set result = Base.UnionN(result, cell)
                    End If
                End If
            End If
        End If
    Next cell
    Set FindAll = result
    
    'Debug info
    'Debug.Print result.Address
End Function

Function DictToArray(dict As Scripting.Dictionary) As Variant
    'Convert a dictionary of strings to a variant array
    'This function also works for hidden cells
    '
    'Input args:
    '  dict:           The dictionary
    '
    'Output args:
    '  DictToArray:    The variant array
    
    'Init output
    Dim arr() As Variant
    DictToArray = arr
    
    'Check args
    If dict.Count = 0 Then
        Exit Function
    End If
    
    'Perform conversion
    ReDim arr(0 To dict.Count - 1)
    Dim idx As Integer: idx = 0
    Dim str As Variant
    
    For Each str In dict.Items
        arr(idx) = str
        idx = idx + 1
    Next
    
    DictToArray = arr
End Function

'Function GetUniqueStrings(stringDict As Scripting.Dictionary) As Scripting.Dictionary
'    'This function takes a dictionary of strings and returns a dictionary only with with unique strings.
'    'E.g.: {sheep, sheep, dog, cat} becomes {sheep, dog, cat}.
'    'A collection is used since the have a dictionary-like data storage option (store val and key)
'    '
'    'Input args:
'    '  stringDict:   Dictionary containing strings
'    '
'    'Output args:
'    '  FindAll:      Range of cells matching the criteria (subset of rng)
'
'    Dim uniqueDict As New Scripting.Dictionary
'    Set GetUniqueStrings = uniqueDict
'
'    If stringDict Is Nothing Or stringDict.Count = 0 Then
'        Exit Function
'    End If
'
'    Dim key As Variant
'
'    For Each key In stringDict.Keys
'        'Add string to dict if it does not exist
'        If key <> vbNullString And Not uniqueDict.Exists(key) Then
'            Call uniqueDict.Add(key:=key, item:=stringDict(key))
'        End If
'    Next key
'
'    Set GetUniqueStrings = uniqueDict
'End Function

Function Log10(x As Double) As Double
    Log10 = Log(x) / Log(10#)
End Function

Function Difference(minuend As Range, subtrahend As Range) As Range
    'This function calcs the difference of input ranges
    '
    'Input args:
    '  minuend:        Master range
    '  subtrahend:     Range which contents are removed from 'minuend'
    '
    'Output args:
    '  Difference:     Subset range of cells of minuend
    
    'Init args
    Set Difference = minuend

    'Check args
    If subtrahend Is Nothing Then
        Exit Function
    End If
    
    'Iteratively remove shared cells of the two passed ranges.
    Dim diminishedMinuend As Range
    
    Dim firstValue As Boolean
    firstValue = True
    
    Dim cell As Range
    For Each cell In minuend
        
        'Debug info
        'Debug.Print "cell: " + cell.Address
        'Debug.Print "subtrahend: " + subtrahend.Address
        
        Dim isIntersecting As Boolean
        isIntersecting = (Not Intersect(cell, subtrahend) Is Nothing)
        
        If Not isIntersecting Then
            If firstValue Then
                Set diminishedMinuend = cell
                firstValue = False
            Else
                Set diminishedMinuend = Union(diminishedMinuend, cell)
            End If
        End If
    Next cell
    
    Set Difference = diminishedMinuend
End Function

Function CalcOnArray(f As String, arr As Variant, Optional additionalArg As Variant, Optional obj As Object) As Variant()

    'Runs a function f on every item of an array.
    'f's signature has to be:
    '  f(argIn As Variant, Optional additionalArg As Variant) As Variant
    '
    'The additionalArg can also be an array. If it has the same length as the passed array arr the function is executed element-wise
    '
    'Input args:
    '  f:              Module and function name e.g. PlanningUtils.DoThisAndThat which is applied on every array element
    '  arr:            Array the function is run on
    '  additionalArg:  Argument which is passed to the function f
    '
    'Output args:
    '  CalcOnArray:    The array which contains calculated data
    
    Dim item As Variant
    Dim retArr() As Variant
    ReDim retArr(UBound(arr))
    
    Dim arrIdx As Long
    
    For arrIdx = 0 To UBound(arr)
        Dim argIn As Variant
        Dim argOut As Variant
        
        argIn = arr(arrIdx)
        If IsMissing(additionalArg) Then
            'Calc without additionalArg
            argOut = Application.Run(f, argIn)
            If obj Is Nothing Or IsMissing(obj) Then
                argOut = Application.Run(f, argIn)
            Else
                argOut = CallByName(obj, f, VbMethod, argIn)
            End If
            
        Else
            Dim addArgVal As Variant
            
            If IsArray(additionalArg) Then
                'Calculate element-wise with both arrays
                If UBound(additionalArg) = UBound(arr) Then
                    'Calc element-wise
                    addArgVal = additionalArg(arrIdx)
                Else
                    'Calc with first element of additional arg
                    addArgVal = additionalArg(0)
                End If
            Else
                'Calc with additional arg (no array type, additionalArg is constant in every cycle)
                addArgVal = additionalArg
            End If
            
            If obj Is Nothing Or IsMissing(obj) Then
                argOut = Application.Run(f, argIn, addArgVal)
            Else
                argOut = CallByName(obj, f, VbMethod, argIn, addArgVal)
            End If
        End If
        retArr(arrIdx) = argOut
    Next arrIdx
    CalcOnArray = retArr
End Function

Function CalcAddition(summand1 As Variant, summand2 As Variant) As Double

    'Add-function which works with the 'CalcOnArray'FP (functional programming) mechanism
    '
    'Input args:
    '  summand1:       Val which is added
    '  summand2:       Val which is added
    '
    'Output args:
    '  CalcAddition:   The result
    
    CalcAddition = summand1 + summand2
End Function

Function CalcSubstraction(minuend As Variant, subtrahend As Variant) As Double

    'Substraction-function which works with the 'CalcOnArray'FP (functional programming) mechanism
    '
    'Input args:
    '  minuend:            Base value
    '  subtrahend:         Value which is substracted from 'minuend'
    '
    'Output args:
    '  CalcSubstraction:   The result
    
    CalcSubstraction = minuend - subtrahend
End Function

Public Function IsArrayAllocated(arr As Variant) As Boolean
    'Source: http://www.cpearson.com/excel/vbaarrays.htm
    
    'Returns TRUE if the array is allocated (either a static array or a dynamic array that has been
    'sized with Redim) or FALSE if the array is not allocated (a dynamic that has not yet
    'been sized with Redim, or a dynamic array that has been Erased). Static arrays are always
    'allocated.
    '
    'The VBA IsArray function indicates whether a variable is an array, but it does not
    'distinguish between allocated and unallocated arrays. It will return TRUE for both
    'allocated and unallocated arrays. This function tests whether the array has actually
    'been allocated.
    '
    'Input args:
    '  arr:                The array which is tested
    '
    'Output args:
    '  IsArrayAllocated:   True/False

    Dim N As Long
    On Error Resume Next
    
    'if Arr is not an array, return FALSE and get out.
    If IsArray(arr) = False Then
        IsArrayAllocated = False
        Exit Function
    End If
    
    'Attempt to get the UBound of the array. If the array has not been allocated,
    'an error will occur. Test Err.Number to see if an error occurred.
    N = UBound(arr, 1)
    If (Err.Number = 0) Then
    
        'Under some circumstances, if an array
        'is not allocated, Err.Number will be
        '0. To acccomodate this case, we test
        'whether LBound <= Ubound. If this
        'is True, the array is allocated. Otherwise,
        'the array is not allocated.
    
        If LBound(arr) <= UBound(arr) Then
            'No error. array has been allocated.
            IsArrayAllocated = True
        Else
            IsArrayAllocated = False
        End If
    Else
        'Error. unallocated array
        On Error GoTo 0
        IsArrayAllocated = False
    End If
End Function

Function Max(val1 As Variant, Optional val2 As Variant) As Variant
    'Returns the maximum value of two values or of a passed array
    '
    'Input args:
    '   val1:   Array or numeric value. If array only val1 arg is used
    '   val2:   Numeric value
    'Output args:
    '   Max:    The maximum value
    
    'Init output
    Max = 0
    
    'Check args
    If IsArray(val1) And Not Base.IsArrayAllocated(val1) Then Exit Function
    
    If IsArray(val1) Then
        Dim arrVal As Variant
        For Each arrVal In val1
            If arrVal > Max Then Max = arrVal
        Next arrVal
    ElseIf val1 > val2 Then
        Max = val1
    Else
        Max = val2
    End If
End Function

Function Min(val1 As Variant, Optional val2 As Variant) As Variant
    'Returns the minimum value of two values or of a passed array
    '
    'Input args:
    '  val1:    Array or numeric value. If array only val1 arg is used
    '  val2:    Numeric value
    '
    'Output args:
    '  Min:    The minimum value
    
    'Init output
    Min = 0
    
    'Check args
    If IsArray(val1) And Not Base.IsArrayAllocated(val1) Then Exit Function
    
    If IsArray(val1) Then
        Dim arrVal As Variant
        For Each arrVal In val1
            If arrVal < Min Then Min = arrVal
        Next arrVal
    ElseIf val1 < val2 Then
        Min = val1
    Else
        Min = val2
    End If
End Function

Function UnionN(first As Range, second As Range) As Range
    'Returns the union of two ranges and checks for input args being nothing
    '
    'Input args:
    '  first:  First range one wants to union
    '  second: Second range one wants to union
    '
    'Output args:
    '  UnionN: The union
    
    If first Is Nothing And Not second Is Nothing Then
        Set UnionN = second
    ElseIf second Is Nothing And Not first Is Nothing Then
        Set UnionN = first
    ElseIf first Is Nothing And second Is Nothing Then
        Set UnionN = Nothing
    Else
        Set UnionN = Union(first, second)
    End If
End Function

Function IntersectN(first As Range, second As Range) As Range
    'Returns the intersection of two ranges and checks for input args being nothing
    '
    'Input args:
    '  first:  First range one wants to intersect
    '  second: Second range one wants to intersect
    '
    'Output args:
    '  IntersectN: The intersection
    
    If first Is Nothing Or second Is Nothing Then
        Set IntersectN = Nothing
    Else
        Set IntersectN = Intersect(first, second)
    End If
End Function

Function GetArrayDimension(arr As Variant) As Long
    'Returns the dimension of an array 'perpendicular' to Ubound(arr)
    '
    'Input args:
    '  arr:                The array
    '
    'Output args:
    '  GetArrayDimension:  The 'perpendicular'dimension
    
    'Try to fetch Ubound of all array dimensions as long as there is no error
    On Error GoTo Err
    Dim idx As Long
    Dim tmp As Long
    idx = 0
    While True
        idx = idx + 1
        tmp = UBound(arr, idx)
    Wend
Err:
    GetArrayDimension = idx - 1
End Function

Function ConcatToArray(arr As Variant, concatee As Variant) As Variant
    'Concatenates an array and a single value or a second array
    '
    'Input args:
    '   arr:        The array the data is concatenated to
    '   concatee:   The value or array that is concatenated to the array
    '
    'Output args:
    '   ConcatToArray:    Output array. If any of the variables is empty then the other one will be returned
    
    Dim outArray() As Variant
    
    'Init output
    ConcatToArray = outArray
    
    'Check args and concat
    If Not Base.IsArrayAllocated(arr) Then
        arr = concatee
        Erase concatee
    End If
    
    If Not Base.IsArrayAllocated(arr) Then Exit Function
    
    Dim arrCount As Long: arrCount = UBound(arr) - LBound(arr) + 1
    Dim arrIdx As Long
    
    If Not IsArray(arr) Then Exit Function
    If IsArray(concatee) Then
        If Not Base.IsArrayAllocated(concatee) Then
            'Output first array if second array is not initialized
            ConcatToArray = arr
            Exit Function
        End If
        Dim concateeCount As Long: concateeCount = UBound(concatee) - LBound(concatee) + 1
        ReDim outArray(0 To arrCount + concateeCount - 1)
        
        'Add the first array to the resulting array
        For arrIdx = 0 To arrCount - 1
            outArray(arrIdx) = arr(LBound(arr) + arrIdx)
        Next arrIdx
        
        'Add the concatee array to the resulting array
        For arrIdx = arrCount To UBound(outArray)
            outArray(arrIdx) = concatee(LBound(concatee) + arrIdx - arrCount)
        Next arrIdx
        
    Else
        'Append a single value to the array
        ReDim outArray(0 To arrCount)
        For arrIdx = 0 To UBound(outArray) - 1
            outArray(arrIdx) = arr(arrIdx)
        Next arrIdx
        
        outArray(UBound(outArray)) = concatee
    End If
    ConcatToArray = outArray
End Function

Function ExtractSubArray(arr As Variant, lbnd As Long, ubnd As Long) As Variant()
    'This function extracts a subarray out of an array. Passed bounds have to be in range of the array bounds
    '
    'Input args:
    '   arr:    The array
    '   lbnd:   The lower bound (inclusive)
    '   ubnd:   The upper bound (inclusive)
    '
    'Output args:
    '   ExtractSubArray:    The extracted array
    
    'Init output
    Dim subArr() As Variant
    ExtractSubArray = subArr
    
    'Check args
    If Not Base.IsArrayAllocated(arr) Then Exit Function
    If lbnd < LBound(arr) Or ubnd > UBound(arr) Or lbnd > ubnd Then Exit Function
    
    'Extract the sub array
    ReDim subArr(0 To ubnd - lbnd)
    
    Dim idx As Long
    For idx = lbnd To ubnd
        subArr(idx - lbnd) = arr(idx)
    Next idx
    
    ExtractSubArray = subArr
End Function

Function CRange(rng As Variant) As Range
    Set CRange = rng
End Function

Function CWorksheet(ws As Variant) As Worksheet
    Set CWorksheet = ws
End Function

Function ShiftRight(ByVal value As Long, ByVal shift As Byte) As Long
    ShiftRight = value
    If shift > 0 Then
        ShiftRight = Int(ShiftRight / (2 ^ shift))
    End If
End Function
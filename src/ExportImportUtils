VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ExportImportUtils"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'  This macro collection lets you organize your tasks and schedules
'  for you with the evidence based schedule (EBS) approach by Joel Spolsky.
'
'  Copyright (C) 2020  Christian Weihsbach
'  This program is free software; you can redistribute it and/or modify
'  it under the terms of the GNU General Public License as published by
'  the Free Software Foundation; either version 3 of the License, or
'  (at your option) any later version.
'  This program is distributed in the hope that it will be useful,
'  but WITHOUT ANY WARRANTY; without even the implied warranty of
'  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'  GNU General Public License for more details.
'  You should have received a copy of the GNU General Public License
'  along with this program; if not, write to the Free Software Foundation,
'  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
'
'  Christian Weihsbach, weihsbach.c@gmail.com

Option Explicit

Function ExportVisibleTasks()
    Const FN As String = "ExportVisibleTasks"
    Call MessageUtils.InvokeFnMsg(FN)

    'This function exports all sheets of tasks that are visible in the planning sheet list.
    'Tasks are exported to a separate workbook only contaning the sheets of tasks

    Dim visibleTasks As Range
    Set visibleTasks = PlanningUtils.GetVisibleTasks
    
    'Debug info
    'Debug.Print "Visible Tasks: " & visibleTasks.Count & " out of " & hashRange.Count
    
    If Not visibleTasks Is Nothing Then
        'In case there are visible hashes store them to a special virtual storage sheet.
        
        Dim sheetArea As Range
        Dim cll As Range
        
        For Each cll In visibleTasks
            Set sheetArea = TaskUtils.GetTaskSheetArea(cll.value)
            'Store the sheet in a special virtual sheet with EXIMPORT_SHEET_PREFIX. Do not delete the original sheet as it still has to
            'be available inside this script
            
            Call VirtualSheetUtils.StoreAsVirtualSheet(cll.value, sheetArea, EXIMPORT_SHEET_PREFIX, False)
        Next cll
    End If
End Function

Function ImportTasks()
    Const FN As String = "ImportTasks"
    Call MessageUtils.InvokeFnMsg(FN)
    
    'This function imports all tasks of a special export worksheet
     
    'Rewriting import sheet hashes can cause duplicate imports and is deactivated. Use copy task function instead.
    'ExportImportUtils.RewriteImportSheetHashes
        
    Dim vSheets As Scripting.Dictionary
    Dim orderedNames() As Variant
    
    Set vSheets = VirtualSheetUtils.GetAllVirtualSheets(Constants.EXIMPORT_SHEET_PREFIX, orderedNames)
    Dim key As Variant
    Dim anyHash As String
        
    Dim keyIdx As Long: keyIdx = 1
    
    For Each key In vSheets.Keys
        'Prevent crash of worksheet for long-running import
        DoEvents
        If Utils.TryCatchedCallExternalStop Then Call Err.Raise(18)
        
        Call FactoryProgressBar.Update(cpt:="Importing tasks", _
                                       n:=keyIdx + 1, ofN:=vSheets.Count, subTaskText:="Importing task " & keyIdx + 1 & " of " & vSheets.Count)
                                                    
        Dim cpHash As String: cpHash = key
        If SanityUtils.CheckHash(cpHash) Then
        
            'Add new task sheet here. Copy data selectively
            Dim importSheetArea As Range
            If VirtualSheetUtils.VirtualSheetExists(cpHash, Constants.EXIMPORT_SHEET_PREFIX) Then
                Set importSheetArea = VirtualSheetUtils.GetVirtualStorageDataRange(cpHash, Constants.EXIMPORT_SHEET_PREFIX)
            End If
            
            If Not importSheetArea Is Nothing Then
                Dim newSheet As Worksheet
                Set newSheet = TaskUtils.AddTaskSheet(cpHash)
                
                If Not newSheet Is Nothing Then
                    Call SyncSheetData(importSheetArea, newSheet)
                
                    'Backsync the task to the planning sheet to make it appear in the list.
                    Call PlanningUtils.BacksyncTask(syncedHash:=cpHash)
    
                    Dim currentName As String
                    currentName = TaskUtils.GetName(importSheetArea)
            
                    'Append postfix to task name.
                    Call PlanningUtils.ApplyTaskData(hash:=cpHash, name:=currentName & SettingUtils.GetImportedTaskPostfixSetting, handleName:=True)
                    anyHash = cpHash
                    
                    'Close task sheet(s) to minimize memory usage
                    Call TaskUtils.VirtualizeTaskSheets
                End If
            End If
        End If
        
        keyIdx = keyIdx + 1
    Next key
    
    If anyHash <> "" Then
        'Run handlers which are applied to all tasks (vertically) afterwards. Do not change 'Finished on date' of randomly selected 'any' task
        '(1) Set cell validation for tags, contributor, kanban list.
        '(2) Readjust task priority values
        Call PlanningUtils.ApplyTaskData(hash:=anyHash, _
                                         handleTags:=True, _
                                         handleContributor:=True, _
                                         handleKanbanList:=True, kanbanChangesFinishedOn:=False, _
                                         handlePriority:=True)
    End If
End Function

Function RewriteImportSheetHashes()
    Dim nameCell As Range
    Dim item As Variant
    
    For Each item In VirtualSheetUtils.GetAllVirtualSheets(Constants.EXIMPORT_SHEET_PREFIX).Items
        Set nameCell = item
        nameCell.value = Utils.CreateHashString("t")
    Next item
End Function

Function SyncSheetData(inSheetArea As Range, outSheet As Worksheet)
    'Synchronizes the data of two task sheets. Because entries are added to time list and ebs list of outSheet
    'the sheet needs to be loaded / present. Copying work for the follow task sheet versions:
    '
    ' (1)   <no_version>    -> <v02>
    ' (2)   <v02>           -> <v02>
    '
    'Input args
    '   inSheetArea:    The task sheet (area) source
    '   outSheet:       The task sheet destination
    
    'Check args
    If inSheetArea Is Nothing Or outSheet Is Nothing Then Exit Function
    
    Call TaskUtils.SetName(outSheet, TaskUtils.GetName(inSheetArea))
    
    'Do not recalculate ebs list entries as they will be copied later
    Call TaskUtils.SetEstimate(outSheet, TaskUtils.GetEstimate(inSheetArea), False)
    
    Call TaskUtils.SetKanbanList(outSheet, TaskUtils.GetKanbanList(inSheetArea))
    Call TaskUtils.SetContributor(outSheet, TaskUtils.GetContributor(inSheetArea))
    Call TaskUtils.SetDueDate(outSheet, TaskUtils.GetDueDate(inSheetArea))
    Call TaskUtils.SetFinishedOnDate(outSheet, TaskUtils.GetFinishedOnDate(inSheetArea))
    Call TaskUtils.SetComment(outSheet, TaskUtils.GetComment(inSheetArea))
    
    'Copy tags
    Dim tagHeaders As String
    Dim tagValues As String
    Call TaskUtils.GetTags(inSheetArea, tagHeaders, tagValues)
    Call TaskUtils.SetTags(outSheet, tagHeaders, tagValues)
    
    'Now copy list entries
    
    Dim inRng As Range
    Dim outRng As Range
    
    'Time list
    '
    '
    
    'Copy counter
    Set inRng = TaskUtils.GetTimeListColumn(inSheetArea, 1, ceData)
    Set outRng = TaskUtils.GetTimeListColumn(outSheet, 1, ceData)
    
    If Not inRng Is Nothing And Not outRng Is Nothing Then
        Call inRng.Copy(outRng)
    End If
    
    'Copy start dates
    Set inRng = TaskUtils.GetTimeListColumn(inSheetArea, Constants.START_TIME_HEADER, ceData)
    Set outRng = TaskUtils.GetTimeListColumn(outSheet, Constants.START_TIME_HEADER, ceData)
    
    If Not inRng Is Nothing And Not outRng Is Nothing Then
        Call inRng.Copy(outRng)
    End If
    
    'Copy end dates
    Set inRng = TaskUtils.GetTimeListColumn(inSheetArea, Constants.END_TIME_HEADER, ceData)
    Set outRng = TaskUtils.GetTimeListColumn(outSheet, Constants.END_TIME_HEADER, ceData)
    
    If Not inRng Is Nothing And Not outRng Is Nothing Then
        Call inRng.Copy(outRng)
    End If
       
    'Copy plain or calendar delta setting and add calendar delta
    Set inRng = TaskUtils.GetTimeListColumn(inSheetArea, Constants.TIME_DELTA_HEADER, ceData)
    Set outRng = TaskUtils.GetTimeListColumn(outSheet, Constants.TIME_DELTA_HEADER, ceData)
    
    Dim rowIdx As Integer
    For rowIdx = 1 To outRng.Rows.Count
        Dim calDelta As Double: calDelta = -1
        Call TaskUtils.AddSpecialActionsToTimeListRow(outSheet, outRng(rowIdx))
        If Not inRng(rowIdx).HasFormula Then
            calDelta = CDbl(inRng(rowIdx).value)
            Call TaskUtils.SetCalendarDelta(outRng(rowIdx), calDelta)
        End If
    Next rowIdx

    'Ebs list
    '
    '
    
    'Copy counter
    Set inRng = TaskUtils.GetEbsListColumn(inSheetArea, 1, ceData)
    Set outRng = TaskUtils.GetEbsListColumn(outSheet, 1, ceData)
    
    If Not inRng Is Nothing And Not outRng Is Nothing Then
        Call inRng.Copy(outRng)
    End If
    
    'Copy support points
    Set inRng = TaskUtils.GetEbsListColumn(inSheetArea, Constants.SINGLE_SUPPORT_POINT_HEADER, ceData)
    Set outRng = TaskUtils.GetEbsListColumn(outSheet, Constants.SINGLE_SUPPORT_POINT_HEADER, ceData)
    
    If Not inRng Is Nothing And Not outRng Is Nothing Then
        Call inRng.Copy(outRng)
    End If
    
    'Copy self time
    Set inRng = TaskUtils.GetEbsListColumn(inSheetArea, Constants.EBS_SELF_TIME_HEADER, ceData)
    Set outRng = TaskUtils.GetEbsListColumn(outSheet, Constants.EBS_SELF_TIME_HEADER, ceData)
    
    If Not inRng Is Nothing And Not outRng Is Nothing Then
        Call inRng.Copy(outRng)
    End If
End Function
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ExportImportUtils"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'  This macro collection lets you organize your tasks and schedules
'  for you with the evidence based schedule (EBS) approach by Joel Spolsky.
'
'  Copyright (C) 2020  Christian Weihsbach
'  This program is free software; you can redistribute it and/or modify
'  it under the terms of the GNU General Public License as published by
'  the Free Software Foundation; either version 3 of the License, or
'  (at your option) any later version.
'  This program is distributed in the hope that it will be useful,
'  but WITHOUT ANY WARRANTY; without even the implied warranty of
'  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'  GNU General Public License for more details.
'  You should have received a copy of the GNU General Public License
'  along with this program; if not, write to the Free Software Foundation,
'  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
'
'  Christian Weihsbach, weihsbach.c@gmail.com

Option Explicit

Function ExportVisibleTasks()
    'This function exports all sheets of tasks that are visible in the planning sheet list.
    'Tasks are exported to a separate workbook only contaning the sheets of tasks

    Dim visibleTasks As Range
    Set visibleTasks = PlanningUtils.GetVisibleTasks
    
    'Debug info
    'Debug.Print "Visible Tasks: " & visibleTasks.Count & " out of " & hashRange.Count
    
    If Not visibleTasks Is Nothing Then
        'In case there are visible hashes store them to a special virtual storage sheet.
        
        Dim sheetArea As Range
        Dim cll As Range
        
        For Each cll In visibleTasks
            Set sheetArea = TaskUtils.GetTaskSheetArea(cll.value)
            'Store the sheet in a special virtual sheet with EXIMPORT_SHEET_PREFIX. Do not delete the original sheet as it still has to
            'be available inside this script
            
            Call VirtualSheetUtils.StoreAsVirtualSheet(cll.value, sheetArea, EXIMPORT_SHEET_PREFIX, False)
        Next cll
    End If
End Function

Function ImportTasks()
    'This function imports all tasks of a special export worksheet
     
    ExportImportUtils.RewriteImportSheetHashes
        
    Dim vSheets As Scripting.Dictionary
    Set vSheets = VirtualSheetUtils.GetAllVirtualSheets(Constants.EXIMPORT_SHEET_PREFIX)
    Dim key As Variant
    Dim anyHash As String
    
    For Each key In vSheets.Keys
        'Prevent crash of worksheet for long-running import
        DoEvents
        
        Dim cpHash As String: cpHash = key
        If SanityUtils.CheckHash(cpHash) Then
            Dim loadedSheet As Worksheet
            Set loadedSheet = VirtualSheetUtils.LoadVirtualSheet(cpHash, Constants.EXIMPORT_SHEET_PREFIX, ThisWorkbook.Worksheets(Constants.TASK_SHEET_TEMPLATE_NAME))
            If Not loadedSheet Is Nothing Then
                Call TaskUtils.SetHash(loadedSheet, cpHash)
                
                'Backsync the task to the planning sheet to make it appear in the list.
                Call PlanningUtils.BacksyncTask(syncedHash:=cpHash)

                Dim currentName As String
                currentName = TaskUtils.GetName(loadedSheet)
        
                'Append postfix to task name.
                Call PlanningUtils.ApplyTaskData(hash:=cpHash, name:=currentName & SettingUtils.GetImportedTaskPostfixSetting, handleName:=True)
                anyHash = cpHash
                
                'Close task sheet(s) to minimize memory usage
                Call TaskUtils.VirtualizeTaskSheets
            End If
        End If
    Next key
    
    If anyHash <> "" Then
        'Run handlers which are applied to all tasks (vertically) afterwards. Do not change 'Finished on date' of randomly selected 'any' task
        '(1) Set cell validation for tags, contributor, kanban list.
        '(2) Readjust task priority values
        Call PlanningUtils.ApplyTaskData(hash:=anyHash, _
                                         handleTags:=True, _
                                         handleContributor:=True, _
                                         handleKanbanList:=True, kanbanChangesFinishedOn:=False, _
                                         handlePriority:=True)
    End If
End Function

Function RewriteImportSheetHashes()
    Dim nameCell As Range
    Dim item As Variant
    
    For Each item In VirtualSheetUtils.GetAllVirtualSheets(Constants.EXIMPORT_SHEET_PREFIX).Items
        Set nameCell = item
        nameCell.value = Utils.CreateHashString("t")
    Next item
End Function
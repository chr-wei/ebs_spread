VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Planning"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
'  This macro collection lets you organize your tasks and schedules
'  for you with the evidence based schedule (EBS) approach by Joel Spolsky.
'
'  Copyright (C) 2020  Christian Weihsbach
'  This program is free software; you can redistribute it and/or modify
'  it under the terms of the GNU General Public License as published by
'  the Free Software Foundation; either version 3 of the License, or
'  (at your option) any later version.
'  This program is distributed in the hope that it will be useful,
'  but WITHOUT ANY WARRANTY; without even the implied warranty of
'  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'  GNU General Public License for more details.
'  You should have received a copy of the GNU General Public License
'  along with this program; if not, write to the Free Software Foundation,
'  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
'
'  Christian Weihsbach, weihsbach.c@gmail.com

Option Explicit

'A special modified selection which can be just the 'normal' excel Selection range or an extended selection which
'includes all the cells of column in the task list which have the same value (multiple selection)
Public lastSpecialSelection As Range

Enum UserEstimateStatus
    ceInvalid = 0
    ceValidHours = 1
    ceValidDate = 2
End Enum

Enum CumulativeMode
    ceInvalid = 0
    ceCumulative = 1
    ceSingle = 2
End Enum

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    'Run a catched call to the main selection handler method in this sheet
    Call Utils.RunTryCatchedCall(f:="HandleSelectionChanges", obj:=Planning, arg1:=Target, screenUpdating:=False)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Const FN As String = "Planning.Worksheet_Change"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Run a catched call to the main value handler method in this sheet
    Call Utils.RunTryCatchedCall(f:="HandleChanges", obj:=Planning, arg1:=Target, screenUpdating:=False)
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As hyperlink)
    Const FN As String = "Planning.Worksheet_FollowHyperlink"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Run a catched call to the hyperlink handler method in this sheet
    Call Utils.RunTryCatchedCall(f:="FollowTaskSheetLink", obj:=PlanningUtils, arg1:=Target, screenUpdating:=False)
End Sub

Sub UI_AddNewTask()
    Const FN As String = "Planning.UI_AddNewTask"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Add a new task
    Call Utils.RunTryCatchedCall(f:="AddNewTask", obj:=PlanningUtils, enableEvt:=False, screenUpdating:=False)
End Sub

Sub UI_CopyTask()
    Const FN As String = "Planning.UI_CopyTask"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Copy a task. Do make sure the user's current selection will point to the copied task after creating it. To do so create the new hash here directly
    'and search for it afterwards
    
    Dim copiedHash As String
    copiedHash = PlanningUtils.GetTaskHash()
    
    If SanityUtils.CheckHash(copiedHash) Then
        Dim newHash As String
        newHash = Utils.CreateHashString("t")
        'Call this function with events to copy the task data from worksheet to task sheet immediately
        'Only call with disabled events to not mix up the cell validation values
        Utils.RunTryCatchedCall f:="CopyTask", obj:=PlanningUtils, arg1:=newHash, arg2:=copiedHash, _
                                enableEvt:=False, screenUpdating:=False
        
        'Select the new task
        Dim copiedCell As Range
        Set copiedCell = PlanningUtils.IntersectHashAndListColumn(newHash, Constants.TASK_NAME_HEADER)
        
        If Not copiedCell Is Nothing Then
            Call PlanningUtils.SelectOnPlanningSheet(copiedCell)
        End If
    End If
End Sub

Sub UI_DeleteSelectedTask()
    Const FN As String = "Planning.UI_DeleteSelectedTask"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Delete the entire task (cannot be undone). Delete the task sheet (named by tHash) and the task row entry in the planning sheet
    Call Utils.RunTryCatchedCall(f:="DeleteSelectedTask", obj:=PlanningUtils, screenUpdating:=False)
End Sub

Sub UI_EndAllTasks()
    Const FN As String = "Planning.UI_EndAllTasks"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Stop tracking for all tasks (helps preventing errors with unconsistent data as not only the task that is actively tracking is stopped)
    Call Utils.RunTryCatchedCall(f:="EndAllTasks", obj:=PlanningUtils, screenUpdating:=False)
End Sub

Sub UI_StartSelectedTask()
    Const FN As String = "Planning.UI_StartSelectedTask"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Track the selected task (add timestamp)
    Call Utils.RunTryCatchedCall(f:="StartSelectedTask", obj:=PlanningUtils, screenUpdating:=False)
End Sub

Sub UI_AddFiveteenMinutesToSelectedTask()
    Const FN As String = "Planning.UI_AddFiveteenMinutesToSelectedTask"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Add start and end timestamp to a task so that 15 minutes of time are booked for that task.
    Dim hash As String
    'Get the hash of the selected task
    hash = PlanningUtils.GetTaskHash()
    
    If SanityUtils.CheckHash(hash) Then
        Call Utils.RunTryCatchedCall(f:="AddXHoursTime", obj:=PlanningUtils, arg1:=hash, arg2:=CDbl(0.25), screenUpdating:=False)
    End If
End Sub

Sub UI_AddZeroMinutesToSelectedTask()
    Const FN As String = "Planning.UI_AddZeroMinutesToSelectedTask"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Used to set a point of time to the task tracking data
    
    Dim hash As String
    'Get the hash of the selected task
    hash = PlanningUtils.GetTaskHash()
    
    If SanityUtils.CheckHash(hash) Then
        Call Utils.RunTryCatchedCall(f:="AddXHoursTime", obj:=PlanningUtils, arg1:=hash, arg2:=CDbl(0), screenUpdating:=False)
    End If
End Sub

Sub UI_ShiftTaskUp()
    Const FN As String = "Planning.UI_ShiftTaskUp"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Shift task up in the planning list (increase priority). To see the effect the list has to be sorted for descending priority number.
    'Sorting is applied automatically when calling the function.
    
    Call Utils.RunTryCatchedCall(f:="ShiftPrio", obj:=PlanningUtils, arg1:=ShiftDirection.ceShiftUp, arg2:=lastSpecialSelection, _
                                 enableEvt:=False, screenUpdating:=False)
    'Since the shift prio command changes the selection with disabled events, handle the selection change manually afterwards.
    'Somehow this does not work when you handle the change inside the Shift prio call through 'RunTryCatchedCall'
    Call Planning.HandleSelectionChanges(PlanningUtils.GetPlanningSelection)
End Sub

Sub UI_ShiftTaskDown()
    Const FN As String = "Planning.UI_ShiftTaskDown"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Shift task down in the planning list (increase priority). To see the effect the list has to be sorted for descending priority number.
    'Sorting is applied automatically when calling the function.
    
    Call Utils.RunTryCatchedCall(f:="ShiftPrio", obj:=PlanningUtils, arg1:=ShiftDirection.ceShiftDown, arg2:=lastSpecialSelection, _
                                 enableEvt:=False, screenUpdating:=False)
    'Since the shift prio command changes the selection with disabled events, handle the selection change manually afterwards.
    'Somehow this does not work when you handle the change inside the Shift prio call through 'RunTryCatchedCall'
    Call Planning.HandleSelectionChanges(PlanningUtils.GetPlanningSelection)
End Sub

Sub UI_GatherTasks()
    Const FN As String = "Planning.UI_GatherTasks"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Edit the priorities of all selected tasks (see multi selection with highlighted lines in task sheet) so that they are sticking together.
    'To see the effect the list has to be sorted for descending priority number.
    'Sorting is applied automatically when calling the function.
    
    Call Utils.RunTryCatchedCall(f:="GatherTasks", obj:=PlanningUtils, arg1:=lastSpecialSelection, _
                                 enableEvt:=False, screenUpdating:=False)
    'Since the gather tasks command changes the selection with disabled events, handle the selection change manually afterwards.
    'Somehow this does not work when you handle the change inside the gahter tasks call through 'RunTryCatchedCall'
    Call Planning.HandleSelectionChanges(PlanningUtils.GetPlanningSelection)
End Sub

Sub UI_RunEbs()
    Const FN As String = "Planning.UI_RunEbs"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'THE main feature. Run all the steps to get evidence based sheduling data and charts for every contributor.
    Call Utils.RunTryCatchedCall(f:="RunEbs", obj:=EbsUtils, screenUpdating:=False)
End Sub

Sub UI_CollectTotalTimesSpent()
    Const FN As String = "Planning.UI_CollectTotalTimesSpent"
    Call MessageUtils.InvokeUIMsg(FN)
    
    'Read the task's data to get the total time a user spent working on it.
    Call Utils.RunTryCatchedCall(f:="CollectTotalTimesSpent", obj:=PlanningUtils, screenUpdating:=False)
End Sub

Function HandleChanges(Target As Range)
    Const FN As String = "Planning.HandleChanges"
    Call MessageUtils.InvokeFnMsg(FN)
    
    'Main cell value change handler. The function checks if a cell of the planning list object was edited. In addition some special
    'cells above the list are checked as well.
    'Handling changes differs from column to column. At first the column headers are read and then a specific handler is called.
    'For user-defined headers (e.g. tag headers with fixed prefix but variable suffix) the header is first normalized (set to its regex expression)
    
    Dim header As String
    header = Utils.GetListColumnHeader(Target)   'The header can only be fetched if a cell inside the list object is selected
    If Target.Count <> 1 Then
        'Currently only changes to one cell will be handled. Do only select single cells inside the table, otherwise deletion of values will fail.
        'To do: Call the steps below on every cell of the selection with for each loop and test.
        Exit Function
    End If

    If StrComp(header, "") = 0 Then
        'Use a fallback for special cells above ebs data columns of the table: Do additional checking of the cell above even when
            'reading the header fails (this is the case if the special cell above the list is selected)
        
            Dim regex As New RegExp
            regex.Global = True
            regex.Pattern = Constants.EBS_COLUMN_REGEX
            Dim bn As Range
            Set bn = Utils.GetBottomNeighbour(Target)
        
            'Test if the bottom neighbour of the selected cell is an ebs column.
            'Set the header so that the handler for the ebs column is called
            If regex.test(bn.value) Then
                Set Target = bn
                header = bn.value
            Else
                Exit Function
            End If
        End If
    
        'Make tag names and ebs column names comparable to standard value (set regex expression as 'header')
        header = UnifyTagName(header)
        header = UnifyEbsColumnName(header)
        
        'Call the specific handler depending on the column header
        Select Case (header)
        Case TASK_NAME_HEADER
            Call ManageTaskNameChange(Target)
        Case TASK_PRIORITY_HEADER
            Call ManageTaskPriorityChange
        Case TASK_ESTIMATE_HEADER:
            Call ManageEstimateChange(Target)
        Case KANBAN_LIST_HEADER:
            Call ManageKanbanListChange(Target, True)
        Case COMMENT_HEADER:
            Call ManageCommentChange(Target)
        Case TAG_REGEX
            Call ManageTagsChange(Target)
        Case EBS_COLUMN_REGEX
            Call ManageEbsColChange(Target)
        Case DUE_DATE_HEADER
            Call ManageDueDateChange(Target)
        Case TASK_FINISHED_ON_HEADER
            Call ManageFinishedOnDateChange(Target)
        Case CONTRIBUTOR_HEADER
            Call ManageContributorChange(Target, True)
        Case T_HASH_HEADER:
            Call ManageHashChange(Target)
        End Select
    End Function

Function HandleSelectionChanges(Target As Range)
    'Main selection handler. The function checks if a cell of the planning list object was selected.
    'Currently only special cell highlighting is maintained with this feature:
    'Highlight multiple rows of the list if a selected value can be found in another row of the same column.
    'The special highlight is saved to a public variable to store it.
    
    Dim header As String
    header = Utils.GetListColumnHeader(Target)
    
    'Reset highlight of all cells (all special multi-selected cells)
    PlanningUtils.ResetHighlight
    
    If StrComp(header, "") = 0 Then
        Exit Function
    End If
    
    'Make tag names comparable with replacing their custom tag column header with their regex expression
    header = UnifyTagName(header)
    
    'Call highlighting for kanban list col, contributor col and tag cols
    Dim highlight As Range
    Select Case (header)
    Case Constants.TAG_REGEX, Constants.CONTRIBUTOR_HEADER, Constants.KANBAN_LIST_HEADER
        Set highlight = ManageHighlightableSelChange(Target)
    End Select
    
    'Store the special highlight selection (only the range of multiple equivalent values in the selected column are stored, not the full row range)
    If Not highlight Is Nothing Then
        Set lastSpecialSelection = highlight
    Else
        Set lastSpecialSelection = Target
    End If
    
    'Debug info
    'Debug.Print "Last savedSelection is: " + lastSpecialSelection.Address
End Function

Function UnifyTagName(header As String) As String
    'Replace the custom tag header (fixed prefix but variable suffix) with its regex expression
    Dim regex As New RegExp

    regex.Global = True
    regex.Pattern = Constants.TAG_REGEX
    
    If regex.test(header) Then
        UnifyTagName = Constants.TAG_REGEX
    Else
        'Fall back to old header
        UnifyTagName = header
    End If
End Function

Function UnifyEbsColumnName(header As String) As String
    'Replace the ebs column name (propability and date/time setting stored in name) with its regex expression
    Dim regex As New RegExp

    regex.Global = True
    regex.Pattern = Constants.EBS_COLUMN_REGEX
    
    If regex.test(header) Then
        UnifyEbsColumnName = Constants.EBS_COLUMN_REGEX
        Exit Function
    Else
        'If none of the above regex matches fall back to old value
        UnifyEbsColumnName = header
    End If
End Function

Function ManageTaskNameChange(changedCell As Range)
    'Manage the change of the task name. Set it to the task sheet
    Dim hash As String
    hash = PlanningUtils.GetTaskHash(changedCell)
    If SanityUtils.CheckHash(hash) Then
        Call TaskUtils.SetName(TaskUtils.GetTaskSheetArea(hash), changedCell.value)
    End If
End Function

Function ManageEstimateChange(changedCell As Range, Optional setNewEbsEstimates As Boolean = True)
    Const FN As String = "ManageEstimateChange"
    'Manage the change of the user's estimate. Multiple things are done here.
    ' (1) Estimate is copied to task sheet
    ' (1.1) But prior to copying it it is check for its type and validity.
    ' (2) If the value is valid check if a date or a time h (double) value was passed
    ' (3) In case of an entered date the date is converted to time h (double) value with looking up events in the (outlook) user's calendar
    ' (4) The entered date value is then replaced with the time h equivalent calculated from 'Now'
    
    Dim hash As String
    hash = PlanningUtils.GetTaskHash(changedCell)
    If SanityUtils.CheckHash(hash) Then
        Dim enteredVal As Variant
        enteredVal = changedCell.value
        
        Dim ues As UserEstimateStatus
        
        'Determine the status of the entered value
        If IsNumeric(enteredVal) Or IsDate(enteredVal) Then
            If 0 < CDbl(enteredVal) And CDbl(enteredVal) <= 100 Then
                'A value less than 100 is allowed for entered hours (generally entered hours should not be larger than 16.0)
                ues = UserEstimateStatus.ceValidHours
                
            ElseIf CDbl(enteredVal) > 100 And CDbl(enteredVal) <= CDbl(Now) Then
                'More than 100 hours is not allowed.
                Call MessageUtils.HandleMessage("Invalid estimate entered. " & enteredVal & " is more than 100h", _
                                                ceWarning, FN)
                ues = UserEstimateStatus.ceInvalid
            ElseIf CDbl(enteredVal) > CDbl(Now) Or enteredVal = CalendarUtils.GetStartOfDay(Now) Then
                'Entered date has to be later than 'NOW'. This does not apply, if the date without clock time is e.g. 16/07/2019 and 'NOW' is 16/07/2019 07:00.
                'It is assumed that the user sets the end of 16/07/2019 as time limit and not the beginning if no time is passed along

                If CDbl(enteredVal) - CDbl(Now) < 100 Then
                    'Entered date should not be later than 100 days from now on. This would make time calculation below run for a long time
                    ues = UserEstimateStatus.ceValidDate
                Else
                    Call MessageUtils.HandleMessage("Invalid estimate entered. " & CDate(enteredVal) & " is more than 100 days from 'Now' on", _
                                                    ceWarning, FN)
                    ues = UserEstimateStatus.ceInvalid
                End If
            Else
                ues = UserEstimateStatus.ceInvalid
            End If
        Else
            'No numeric or date data: Val is not an estimate
            ues = UserEstimateStatus.ceInvalid
        End If
        
        Dim outputVal As Variant
        outputVal = enteredVal
        
        'Process entered value
        If ues = UserEstimateStatus.ceValidDate Then
            'User entered a date - calculate estimate
            Dim enteredDate As Date
            enteredDate = CDate(enteredVal)
            
            If (enteredDate = CalendarUtils.GetStartOfDay(enteredDate)) Then
                'If the user entered a date of a day e.g. 16/07/2019 w/o clock time then the end of the day will be taken as time limit
                enteredDate = CalendarUtils.GetEndOfDay(enteredDate)
            End If
            
            'Now convert date to hours
            Dim contributorCell As Range
            Set contributorCell = PlanningUtils.IntersectHashAndListColumn(hash, Constants.CONTRIBUTOR_HEADER)
                    
            Dim contributor As String
            If Not contributorCell Is Nothing Then
                contributor = contributorCell.value
            Else
                contributor = ""
            End If
            
            'Read the calendar appointments (if any)
            Dim calItems As Outlook.Items
            Set calItems = CalendarUtils.GetCalItems(contributor, Constants.BUSY_AT_OPTIONAL_APPOINTMENTS)
                
            'Calc a mapped hour value: The free time in between all appointments and the given dates
            outputVal = CalendarUtils.MapDateToHours( _
                        contributor, _
                        calItems, _
                        enteredDate, _
                        Now, _
                        SettingUtils.GetContributorApptOnOffset(contributor, ceOnset), _
                        SettingUtils.GetContributorApptOnOffset(contributor, ceOffset))
            
            If outputVal > 0 Then
                ues = UserEstimateStatus.ceValidHours
            Else
                'It is not useful to set the estimate to zero. Especially it cannot be negative
                ues = UserEstimateStatus.ceInvalid
            End If
        End If
        
        'Adjust formatting of the planning sheet cell to display the enterd value correctly
        Select Case ues
        Case UserEstimateStatus.ceValidHours, UserEstimateStatus.ceValidDate
            If setNewEbsEstimates Then
                Call TaskUtils.SetEstimate(TaskUtils.LoadTaskSheet(hash), CDbl(outputVal), True)
            Else
                Call TaskUtils.SetEstimate(TaskUtils.GetTaskSheetArea(hash), CDbl(outputVal), False)
            End If
            
            changedCell.value = outputVal
            changedCell.NumberFormat = Constants.TWO_DECIMALS_FORMAT
                
        Case UserEstimateStatus.ceInvalid
            Dim placeholder As String
                
            Select Case enteredVal
            Case Constants.N_A, ""
                'Just leave it N/A
                placeholder = Constants.N_A
            Case Else
                'Value was malformed and not empty or N/A. Set placeholder to cells and append shortened malformed val
                placeholder = Constants.INVALID_ENTRY_PLACEHOLDER & ": " & Left(CStr(enteredVal), 5) & " [...]"
            End Select
                
            changedCell.value = placeholder
            changedCell.NumberFormat = "General"
            
            If setNewEbsEstimates Then
                Call TaskUtils.SetEstimate(TaskUtils.LoadTaskSheet(hash), placeholder, True)
            Else
                Call TaskUtils.SetEstimate(TaskUtils.GetTaskSheetArea(hash), placeholder, False)
            End If
        End Select
    End If
End Function

Function ManageTaskPriorityChange()
    'Sort the data column priority
    Call PlanningUtils.OrganizePrioColumn
End Function

Function ManageKanbanListChange(changedCell As Range, changeFinishedOnDate As Boolean)
    'Handle the 'status' change of a task.
    
    Dim hash As String
    hash = PlanningUtils.GetTaskHash(changedCell)
    If Not SanityUtils.CheckHash(hash) Then Exit Function
    
    'Set the value to the task sheet
    Dim sheetArea As Range
    Set sheetArea = TaskUtils.GetTaskSheetArea(hash)
    
    Call TaskUtils.SetKanbanList(sheetArea, changedCell.value)
                
    Dim finishedOnCell As Range
    Set finishedOnCell = PlanningUtils.IntersectHashAndListColumn(hash, Constants.TASK_FINISHED_ON_HEADER)
            
    Dim prioCell As Range
    Set prioCell = PlanningUtils.IntersectHashAndListColumn(hash, Constants.TASK_PRIORITY_HEADER)
    
    Select Case (changedCell.value)
    Case Constants.KANBAN_LIST_DONE
        If PlanningUtils.IsTaskTracking(changedCell) Then
            Call PlanningUtils.EndAllTasks
        End If
                      
        prioCell.value = Constants.N_A
        
        'Collect total time spent
        Dim timeCell As Range
        Set timeCell = Base.IntersectN( _
                    PlanningUtils.GetTaskListColumn(Constants.TOTAL_TIME_HEADER, ceData), changedCell.EntireRow)
        
        Set sheetArea = TaskUtils.GetTaskSheetArea(hash)
        timeCell.NumberFormat = Constants.TWO_DECIMALS_FORMAT
        timeCell.value = TaskUtils.GetTaskTotalTime(sheetArea)
        
    Case Else
        'Set a priority if no proper value is set
        If Not IsNumeric(prioCell.value) Then
            prioCell.value = Constants.TASK_PRIO_INITIAL
        End If
    End Select
    
    'Change the finished on date depending on the kanban list value
    If changeFinishedOnDate Then
        Select Case (changedCell.value)
        Case Constants.KANBAN_LIST_DONE
            
            'When the task is changed to 'done' the end time stamp in the sheetArea can be set. It is set to the last
            'time the user tracked time for this task. If no time was tracked the time stamp is set to 'Now'
            'The handling of finished on time can be turned of
                
            Dim lastStamp As Double
            lastStamp = CDbl(TaskUtils.GetLastEndTimestamp(sheetArea))
                
            Dim datee As Date
                    
            If lastStamp <> 0 Then
                datee = CDate(lastStamp)
            Else
                datee = CDate(Now)
            End If
                
            finishedOnCell.value = datee
            
        Case Else
            'The task is active again: Delete finished on date
            finishedOnCell.value = Constants.N_A
        End Select
        
        'Manage finished on date change for planning and task sheetArea manually
        Call Planning.ManageFinishedOnDateChange(finishedOnCell)
    End If
  
    'Sort the priority column
    Call PlanningUtils.OrganizePrioColumn
End Function

Function ManageHashChange(changedCell As Range)
    'To do: Prevent editing of the cells. (optional)
    'changedCell.Value = valueOnSelecting
    'MsgBox "Changing the HASH is not allowed. Value was reset."
End Function

Function ManageCommentChange(changedCell As Range)
    'Just copy the comment to the task sheet
    Dim hash As String
    hash = PlanningUtils.GetTaskHash(changedCell)
    If SanityUtils.CheckHash(hash) Then
        Call TaskUtils.SetComment(TaskUtils.GetTaskSheetArea(hash), changedCell.value)
    End If
End Function

Function ManageTagsChange(changedCell As Range)
    'Store tags inside the task sheet and update the list validation if tag changes
    
    'Store all tags in the corresponding task sheet
    Dim hash As String
    hash = PlanningUtils.GetTaskHash(changedCell)
    
    If SanityUtils.CheckHash(hash) Then
        Dim serializedTags As String
        Dim serializedTagHeaders As String
        serializedTags = PlanningUtils.GetSerializedTags(hash, serializedTagHeaders)
        Call TaskUtils.SetTags(TaskUtils.GetTaskSheetArea(hash), serializedTagHeaders, serializedTags)
    End If
    
    'If the user entered a new tag update all tag columns and add entries to cell validation list (to make it selectable by dropdown).
    'Adding cell validation should prevent extensive creation of new tags - the user is informed if a 'new' tag is inserted which might be accidental
    Dim tagCol As Range
    Dim headerCells As Range
    Dim cell As Range
        
    Set headerCells = PlanningUtils.GetTagHeaderCells()
    For Each cell In headerCells
        Set tagCol = Utils.GetListColumn(PlanningUtils.GetPlanningSheet, Constants.TASK_LIST_NAME, cell, ceData)
        Call Utils.SetCellValuesForValidation(tagCol)
    Next cell
End Function

Function ManageEbsColChange(changedCell As Range)
    'Collect the data of task sheets ebs estimates (non-cumulative estimates of task self time) or
    'of ebs sheet estimates (cumulative estimates of task queue for a specific user)
    Call PlanningUtils.CollectEbsColData(changedCell)
End Function

Function ManageHighlightableSelChange(changedCell As Range) As Range
    'Set highlight to special multi-selected cells and return the highlighted range (column cells, no entire row selection)
    Set ManageHighlightableSelChange = PlanningUtils.SetMultiCellHighlight(changedCell)
End Function

Function ManageContributorChange(changedCell As Range, setNewEbsEstimates As Boolean)
    'Mange the contributor change
    '
    'Input args:
    '   changedCell:            The cell a contributor's name got changed in
    '   setNewEbsEstimates:     If true new estimates for the current task will be set based on the current velocity pool of the contributor.
    
    Dim hash As String
    hash = PlanningUtils.GetTaskHash(changedCell)
    If Not SanityUtils.CheckHash(hash) Then Exit Function
    
    Dim sheetArea As Variant
    
    If setNewEbsEstimates Then
        'New ebs estimates will be added. Load task sheet from virtual space to add rows to table
        Set sheetArea = TaskUtils.LoadTaskSheet(hash)
    Else
        'Just return the (virtual) sheet area
        Set sheetArea = TaskUtils.GetTaskSheetArea(hash)
    End If
    
    Call TaskUtils.SetContributor(sheetArea, changedCell.value)
    
    Dim contributorCells As Range
    Set contributorCells = PlanningUtils.GetTaskListColumn(Constants.CONTRIBUTOR_HEADER, ceData)
    
    'Debug info
    'Debug.Print contributorCells.Address
    
    'Update the data validation list
    Call Utils.SetCellValuesForValidation(contributorCells)
    
    If setNewEbsEstimates Then
        'If the contributor changes the database for estimates changes as well. Recalculate
        Dim ws As Worksheet: Set ws = sheetArea
        Call TaskUtils.SetEbsEstimates(ws, TaskUtils.GetEstimate(sheetArea))
    End If
End Function

Function ManageDueDateChange(changedCell As Range)
    'Copy the due date to the task sheetArea
    
    Dim hash As String
    hash = PlanningUtils.GetTaskHash(changedCell)
    If SanityUtils.CheckHash(hash) Then
        Dim sheetArea As Variant
        Set sheetArea = TaskUtils.GetTaskSheetArea(hash)
        
        If IsDate(changedCell.value) Then
            Call TaskUtils.SetDueDate(sheetArea, CDate(changedCell.value))
        Else
            Select Case changedCell.value
            Case "", Constants.N_A
                changedCell.value = Constants.N_A
            Case Else
                'The cell content was set neither to a date nor to N/A
                changedCell.value = Constants.INVALID_ENTRY_PLACEHOLDER
            End Select
            
            Call TaskUtils.UnsetDueDate(sheetArea)
        End If
    End If
End Function

Function ManageFinishedOnDateChange(changedCell As Range)
    'Copy the finished on date to the task sheet
    
    Dim hash As String
    hash = PlanningUtils.GetTaskHash(changedCell)
    If SanityUtils.CheckHash(hash) Then
        Dim sheetArea As Variant
        Set sheetArea = TaskUtils.GetTaskSheetArea(hash)
        
        If IsDate(changedCell.value) Then
            Call TaskUtils.SetFinishedOnDate(sheetArea, CDate(changedCell.value))
        Else
            Select Case changedCell.value
            Case "", Constants.N_A
                changedCell.value = Constants.N_A
            Case Else
                'The cell content was set neither to a date nor to N/A
                changedCell.value = Constants.INVALID_ENTRY_PLACEHOLDER
            End Select
            
            Call TaskUtils.UnsetFinishedOnDate(sheetArea)
        End If
    End If
End Function